#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <sstream>
#include <random>
#include <algorithm>
using namespace std;


bool inSet(int currFeature, vector<int> set) {


    for(unsigned int i = 0; i < set.size(); ++i) {
        if(currFeature == set.at(i)) {
            return true;
        }
    }

    return false;

}

double SumDistance(vector<double> object, vector<double> row) {

    double sum = 0;

    for(unsigned int i = 0; i < row.size(); ++i) {
        sum += pow(object.at(i) - row.at(i), 2);
    }

    sum = sqrt(sum); 

    //cout << sum << endl;

    return sum;

}

double accuracy(vector<vector<double>> _data, vector<int> current_set, int feature_to_add) {

    vector<double> object_to_classify;
    vector<double> temp;
    double label_object_to_classify = 0;
    double nearest_neighbor_distance = 0;
    double nearest_neighbor_location = 0;
    double distance = 0;
    double nearest_neighbor_label = 0;
    double number_correctly_classified = 0;
    double accuracy = 0;

    current_set.push_back(feature_to_add);

    for(unsigned int i = 1; i < _data[0].size(); ++i) {
        if(!inSet(i, current_set)) {
            for(unsigned int j = 0; j < _data.size(); ++j) {
                _data[j][i] = 0;
            }
        }
    }
    
    for(unsigned int i = 0; i < _data.size(); ++i) {
        object_to_classify = {_data[i].begin() + 1, _data[i].end()};
        label_object_to_classify = _data[i][0];

        nearest_neighbor_distance = INFINITY;
        nearest_neighbor_location = INFINITY;
        for(unsigned int j = 0; j < _data.size(); ++j) {
            if(j != i) {
                temp = {_data[j].begin() + 1, _data[j].end()};
                distance = SumDistance(object_to_classify, temp);
                if(distance < nearest_neighbor_distance) {
                    nearest_neighbor_distance = distance;
                    nearest_neighbor_location = j;
                    nearest_neighbor_label = _data[nearest_neighbor_location][0];
                }
            }
        }
        // cout << "Object " << i + 1 << " is class " << label_object_to_classify << endl;
        // cout << "Its nearest neighbor is " << nearest_neighbor_location + 1 << " which is in class " << nearest_neighbor_label << endl;
        if(label_object_to_classify == nearest_neighbor_label) {
            ++number_correctly_classified;
        }
    }

    accuracy = number_correctly_classified / _data.size();
    

   // cout << endl;

    // for(unsigned int i = 0; i < object_to_classify.size(); ++i) {
    //     cout << object_to_classify.at(i) << " ";
    // } 

    return accuracy;
}

void search(vector<vector<double>> dat) {

    vector<int> currSet;
    vector<double> bestAccuracy;
    vector<int> set;
    double max = 0;
    int feature_to_add;
    double _accuracy = 0;
    double best = 0;

    for(int i = 1; i < dat[0].size(); ++i) {
        cout << "On the " << i  << "'th level of the search tree" << endl;
        best = 0;
        feature_to_add  = 0;
        for(int j = 1; j < dat[0].size(); ++j) {
            if (inSet(j, currSet) != true) {
                cout << "--Considering adding the " << j << " feature " << endl;
                _accuracy = accuracy(dat, currSet, j);
                if(_accuracy > best) {
                    best = _accuracy;
                    feature_to_add = j;
                }
            }
        }
        currSet.push_back(feature_to_add);
        if(best > max) {
            max = best;
            set = currSet;
        }
        cout << "On level " << i << " I added feature " << feature_to_add << " to current set" << endl;
        cout << "Best accuracy at this level: "  << best << endl << endl;
        bestAccuracy.push_back(best);
    }

    cout << endl;
    cout << "Best Accuracy: " << max << endl;

    cout << "Best Set of Features: ";
    
    for(unsigned int i = 0; i < set.size(); ++i) {
        cout << set.at(i) << " ";
    }

    // cout << endl;
    // for(unsigned int i = 0; i < currSet.size(); ++i) {
    //     cout << currSet.at(i) << " ";
    // }
}

int main() {

    string fileName;
    ifstream myFile;
    string line;
    double entry;

    srand(time(NULL));

    cout << "Enter file name: ";

    cin >> fileName;
    cout << endl;

    myFile.open(fileName);

    vector<vector<double>> data;
    vector<int> test;

    if(myFile.fail()) {
        cout << "File failed to open." << endl;
        return 0;
    }

    while(getline(myFile, line)) {
        data.push_back(vector<double>());
        istringstream ss(line);
        while(ss >> entry) {
            data.back().push_back(entry);
        }
    }

    // for(unsigned int i = 0; i < data.size(); ++i) {
    //     for(unsigned int j = 0; j < data[i].size(); ++j) {
    //         cout << data[i][j] << " ";
    //     }
    //     cout << endl;
    // }

    myFile.close();

    search(data);

    return 0;

}